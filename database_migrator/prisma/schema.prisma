// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url      = "postgresql://root:root@pg:5432/home_gym?schema=public"
  // url      = "postgresql://root:root@localhost:5432/home_gym?schema=public&connect_timeout=300"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String                @id @default(cuid())
  name               String?
  email              String?               @unique
  emailVerified      DateTime?
  image              String?
  subscriptionExpiry DateTime?
  address            String?
  phoneNumber        String?
  height             Float?
  weight             Float?
  accounts           Account[]
  sessions           Session[]
  Order              Order[]
  Cart               Cart?
  Subscription       Subscription[]
  paymentRequests    MpesaPaymentRequest[]
  trainerReviews     TrainerReview[]
  trainerRequests    TrainerRequests[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProductCategory {
  wearable
  gym
  featured
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String?
  shortDesc   String?
  price       Float
  image       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    ProductCategory?
  Carts       ProductToCart[]
  orders      ProductToOrder[]
}

model ProductToCart {
  id        String   @id @default(cuid())
  productId String
  cartId    String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
}

model ProductToOrder {
  id        String   @id @default(cuid())
  productId String
  orderId   String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id        String           @id @default(cuid())
  serialNo  Int              @default(autoincrement())
  ref       String?          @unique
  amount    Float?
  userId    String
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   ProductToOrder[]
}

model Cart {
  id        String          @id @default(cuid())
  userId    String          @unique
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  products  ProductToCart[]
}

model SubscriptionTier {
  id           Int            @id @default(autoincrement())
  name         String
  price        Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  duration     Int
  Subscription Subscription[]
}

model Subscription {
  id         String   @id @default(cuid())
  userId     String
  tierId     Int
  ref        String?  @unique
  amountPaid Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier SubscriptionTier @relation(fields: [tierId], references: [id], onDelete: Cascade)
}

enum PaymentType {
  subscriptionPayment
  productPurchase
}

model MpesaPaymentRequest {
  id                 String      @id @default(cuid())
  userId             String
  amount             Float
  cartId             String?
  subscriptionTierId Int?
  type               PaymentType @default(productPurchase)
  createdAt          DateTime    @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MpesaAccessToken {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  accessToken String   @unique
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Trainer {
  id              String            @id @default(cuid())
  serialNo        Int               @default(autoincrement())
  name            String
  phoneNumber     String?
  email           String?
  location        String?
  bio             String?
  servicesOffered String[]
  availability    String?
  rates           String?
  credentials     String[]
  experience      String?
  reviews         TrainerReview[]
  requests        TrainerRequests[]
}

enum TrainerRequestStatus {
  pending
  accepted
  rejected
}

model TrainerRequests {
  id        String               @id @default(cuid())
  userId    String
  trainerId String
  status    TrainerRequestStatus @default(pending)
  createdAt DateTime             @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainer Trainer @relation(fields: [trainerId], references: [id], onDelete: Cascade)
}

model TrainerReview {
  id        String   @id @default(cuid())
  trainerId String
  userId    String
  rating    Int
  review    String?
  createdAt DateTime @default(now())

  trainer Trainer @relation(fields: [trainerId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
